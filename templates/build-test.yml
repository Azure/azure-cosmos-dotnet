# File: templates/build-test.yml

parameters:
  BuildConfiguration: ''
  Arguments: ''
  VmImage: '' # https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops
  OS: 'Windows'

jobs:
- job:
  displayName: ${{ parameters.BuildConfiguration }}-${{ parameters.VmImage }} Microsoft.Azure.Cosmos.Tests
  pool:
    vmImage: ${{ parameters.VmImage }}

  steps:
  - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
    clean: true  # if true, execute `execute git clean -ffdx && git reset --hard HEAD` before fetching

  - task: DotNetCoreCLI@2
    displayName: Microsoft.Azure.Cosmos.Tests
    condition: succeeded()
    inputs:
      command: test
      projects: 'Microsoft.Azure.Cosmos/tests/Microsoft.Azure.Cosmos.Tests/*.csproj'
      arguments: ${{ parameters.Arguments }} --configuration ${{ parameters.BuildConfiguration }} /p:OS=${{ parameters.OS }}
      publishTestResults: true
      nugetConfigPath: NuGet.config
      testRunTitle: Microsoft.Azure.Cosmos.Tests
      
- job:
  displayName: ${{ parameters.BuildConfiguration }} - ${{ parameters.VmImage }} PerformanceTests
  pool:
    vmImage: ${{ parameters.VmImage }}

  steps:
  - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
    clean: true  # if true, execute `execute git clean -ffdx && git reset --hard HEAD` before fetching

  - task: DotNetCoreCLI@2
    displayName: Microsoft.Azure.Cosmos.PerformanceTests
    condition: succeeded()
    inputs:
      command: run
      projects: 'Microsoft.Azure.Cosmos/tests/Microsoft.Azure.Cosmos.Performance.Tests/*.csproj'
      arguments: --configuration ${{ parameters.BuildConfiguration }} /p:OS=${{ parameters.OS }} -c Release -- -j short -f * -m --allStats --join
      publishTestResults: true
      nugetConfigPath: NuGet.config
      testRunTitle: Microsoft.Azure.Cosmos.PerformanceTests

- job:
  displayName: ${{ parameters.BuildConfiguration }}-${{ parameters.VmImage }} Microsoft.Azure.Cosmos.EmulatorTests
  timeoutInMinutes: 90
  condition: and(succeeded(), eq('${{ parameters.OS }}', 'Windows'))
  pool:
    vmImage: ${{ parameters.VmImage }}

  steps:
  - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
    clean: true  # if true, execute `execute git clean -ffdx && git reset --hard HEAD` before fetching

  - template:  emulator-setup.yml

  - task: DotNetCoreCLI@2
    displayName: Microsoft.Azure.Cosmos.EmulatorTests
    condition: succeeded()
    inputs:
      command: test
      projects: 'Microsoft.Azure.Cosmos/tests/Microsoft.Azure.Cosmos.EmulatorTests/*.csproj'
      arguments: ${{ parameters.Arguments }} --configuration ${{ parameters.BuildConfiguration }} /p:OS=${{ parameters.OS }}
      nugetConfigPath: NuGet.config
      publishTestResults: true
      testRunTitle: Microsoft.Azure.Cosmos.EmulatorTests

- job:
  displayName: ${{ parameters.BuildConfiguration }}-${{ parameters.VmImage }} Microsoft.Azure.Cosmos.EmulatorTests.NETFX
  timeoutInMinutes: 90
  condition: and(succeeded(), eq('${{ parameters.OS }}', 'Windows'))
  pool:
    vmImage: ${{ parameters.VmImage }}

  steps:
  - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
    clean: true  # if true, execute `execute git clean -ffdx && git reset --hard HEAD` before fetching

  - template:  emulator-setup.yml

  - task: DotNetCoreCLI@2
    displayName: Microsoft.Azure.Cosmos.EmulatorTests.NETFX
    condition: succeeded()
    inputs:
      command: build
      projects: 'Microsoft.Azure.Cosmos/tests/Microsoft.Azure.Cosmos.EmulatorTests.NETFX/*.csproj'
      arguments: --configuration ${{ parameters.BuildConfiguration }}
      nugetConfigPath: NuGet.config
      testRunTitle: Build Microsoft.Azure.Cosmos.EmulatorTests.NETFX

  - task: DotNetCoreCLI@2
    displayName: Microsoft.Azure.Cosmos.EmulatorTests.NETFX
    inputs:
      command: custom
      custom: vstest
      arguments: Microsoft.Azure.Cosmos\tests\Microsoft.Azure.Cosmos.EmulatorTests.NETFX\bin\Release\net461\Microsoft.Azure.Cosmos.EmulatorTests.dll /logger:trx
      testRunTitle: Test Microsoft.Azure.Cosmos.EmulatorTests.NETFX

  - task: VisualStudioTestPlatformInstaller@1
    displayName: 'Visual Studio Test Platform Installer'
    inputs:
      versionSelector: latestStable

  - task: VSTest@2
    displayName: 'VsTest - testAssemblies'
    inputs:
      testAssemblyVer2: '**\Microsoft.Azure.Cosmos.EmulatorTests.dll'
      vsTestVersion: 16.0