variables:
  TestArguments: ' --filter "TestCategory!=Quarantine" --verbosity detailed --collect:"Code Coverage" '

jobs: 
- job: 
  displayName: Static Analysis
  pool:
    vmImage: '$(Image)' # https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops
    
  steps:
  - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
    clean: true  # if true, execute `execute git clean -ffdx && git reset --hard HEAD` before fetching
    lfs: true  # whether to download Git-LFS files; defaults to false
    
  - task: DotNetCoreCLI@2
    displayName: Build Microsoft.Azure.Cosmos.sln
    inputs:
      command: build 
      projects: 'Microsoft.Azure.Cosmos.sln'
      configuration: '$(BuildConfiguration)'
      publishTestResults: true 
      
  #Analyze source code for type of content and target types to help determine which tools to run 
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-autoapplicability.AutoApplicability@1
    displayName: 'AutoApplicability'
    inputs:
      VerboseWriter: true
      ExternalRelease: true
      InternalRelease: true
      IsService: true
      IsSoftware: true    
  
  # Scan text elements including code, code comments, and content/web pages, for sensitive terms based on legal, cultural, or geopolitical reasons
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-policheck.PoliCheck@1
    displayName: 'PoliCheck'
    inputs:
      targetType: F
    
  # Analyze source and build output text files for credentials
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@2
    displayName: 'CredScan'
    inputs:
      suppressionsFile: CredsSuppression.json 
      debugMode: true
      
  # AntiMalware scan
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-antimalware.AntiMalware@3
    displayName: 'AntiMalware'
    
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-binskim.BinSkim@3
    displayName: 'BinSkim '
    inputs:
      InputType: Basic
  
  # Run checks for recently discovered vulnerabilities which are not yet incorporated to another tool
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-vulnerabilityassessment.VulnerabilityAssessment@0
    displayName: 'Vulnerability Assessment'

  # Publish Analysis Results (position after all tools ran)
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@2
    displayName: 'Publish Security Analysis Logs'

  # The Post-Analysis build task will analyze the log files produced by the tools, and introduce a build break
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
    displayName: 'Post Analysis'
    inputs:
      AllTools: true
        
#- job: 
#  displayName: Microsoft.Azure.Cosmos.Tests
#  pool:
#    vmImage: '$(Image)' # https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops
#    
#  steps:
#  - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
#    clean: true  # if true, execute `execute git clean -ffdx && git reset --hard HEAD` before fetching
#    lfs: true  # whether to download Git-LFS files; defaults to false
#
#  - task: DotNetCoreCLI@2
#    displayName: Test Microsoft.Azure.Cosmos.Tests
#    inputs:
#      command: test 
#      projects: 'Microsoft.Azure.Cosmos/tests/Microsoft.Azure.Cosmos.Tests/*.csproj'
#      arguments: $(TestArguments)
#      configuration: '$(BuildConfiguration)'
#      publishTestResults: true 
#
#- job: 
#  displayName: Microsoft.Azure.NetFramework.Tests
#  pool:
#    vmImage: '$(Image)' # https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops
#
#  steps:
#  - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
#    clean: true  # if true, execute `execute git clean -ffdx && git reset --hard HEAD` before fetching
#    lfs: true  # whether to download Git-LFS files; defaults to false
#
#  - template:  templates/emulator-setup.yml
#
#  - task: DotNetCoreCLI@2
#    displayName: Test Microsoft.Azure.Cosmos.NetFramework.Tests
#    condition: succeeded() 
#    inputs:
#      command: test 
#      projects: 'Microsoft.Azure.Cosmos/tests/Microsoft.Azure.Cosmos.NetFramework.Tests/*.csproj'
#      arguments: ' --filter "TestCategory!=Quarantine" '
#      configuration: '$(BuildConfiguration)'
#      publishTestResults: true 
#
#
#- job: 
#  displayName: Microsoft.Azure.Cosmos.EmulatorTests
#  pool:
#    vmImage: '$(Image)' # https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops
#
#  steps:
#  - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
#    clean: true  # if true, execute `execute git clean -ffdx && git reset --hard HEAD` before fetching
#    lfs: true  # whether to download Git-LFS files; defaults to false
#
#  - template:  templates/emulator-setup.yml
#
#  - task: DotNetCoreCLI@2
#    displayName: Test Microsoft.Azure.Cosmos.EmulatorTests
#    condition: succeeded() 
#    inputs:
#      command: test 
#      projects: 'Microsoft.Azure.Cosmos/tests/Microsoft.Azure.Cosmos.EmulatorTests/*.csproj'
#      arguments: ' --filter "TestCategory!=Quarantine" '
#      configuration: '$(BuildConfiguration)'
#      publishTestResults: true 
#
